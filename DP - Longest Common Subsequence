1143. Longest Common Subsequence
Medium
Given two strings text1 and text2, return the length of their longest common subsequence. 
If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters 
(can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

 
Example 1:
Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.

Example 2:
Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.

Example 3:
Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.
 

Constraints:
1 <= text1.length, text2.length <= 1000
text1 and text2 consist of only lowercase English characters.

----------------------------------------------------
77% faster
1. Run double for loops.
2. Now compare each and every text1[i-1] with text[j-1].
3. If they are equal add then dp[i][j] = (1+ previous max.).
4. If they are not equal then equate the previous maximum value to dp[i][j], i.e., dp[i][j] = max( dp[i-1][j], dp[i][j-1]

class Solution {
public:

    int longestCommonSubsequence(string text1, string text2){
        int n1 = text1.size();
        int n2 = text2.size();
        int vec[n1+1][n2+1];
        for( int i=0; i<= n1; i++){
            for( int j=0; j<= n2; j++){
                if( i == 0 || j == 0)
                    vec[i][j] = 0;
                else if( text1[i-1] == text2[j-1]){
                    vec[i][j] = 1+ vec[i-1][j-1];
                }
                else{
                    vec[i][j] = max( vec[i-1][j], vec[i][j-1]);
                }
            }
        }
        return vec[n1][n2];
    }
};
-----------------------------------

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size();
        int n = text2.size();
        int ans[m + 1][n + 1];
        
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= n; j++) {
                if (i == 0 || j == 0) {
                    ans[i][j] = 0;
                } else if (text1[i - 1] == text2[j - 1]) {
                    ans[i][j] = ans[i - 1][j - 1] + 1;
                } else {
                    ans[i][j] = max(ans[i - 1][j], ans[i][j - 1]);
                }
            }
        }
        
        return ans[m][n];
    }
};

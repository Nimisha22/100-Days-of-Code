189. Rotate Array
Medium

Given an array, rotate the array to the right by k steps, where k is non-negative.

Example 1:
Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]

Example 2:
Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]

Constraints:
1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1
0 <= k <= 105

------------------------------------

32 ms
class Solution {
public:
    void reverse(vector<int>& nums,int start,int end)
    {
        while(start<=end)
            swap(nums[start++],nums[end--]);
    }
    
    void rotate(vector<int>& nums, int k) {
        k = k % nums.size();
		//reverse first partion
        reverse(nums, 0, nums.size() - k - 1);
		//rverse last partiton
        reverse(nums, nums.size() - k, nums.size() - 1);
		//reverse the whole vector
        reverse(nums, 0, nums.size() - 1);
    }
};

--------------------------------------------------
28 ms
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int size=nums.size();
        if(size<=1)return;
        k%=size;
        auto s=nums.begin(),e=nums.end();
        std::reverse(s,e-k); //O(n)
        std::reverse(e-k,e);
        std::reverse(s,e);
    }
};
static int fastIO=[]{
    ios_base::sync_with_stdio(false);
    std::cout.tie(NULL);
    std::cin.tie(NULL);
    return 0;
}();

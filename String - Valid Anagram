242. Valid Anagram
Easy

Given two strings s and t, return true if t is an anagram of s, and false otherwise.

Example 1:
Input: s = "anagram", t = "nagaram"
Output: true

Example 2:
Input: s = "rat", t = "car"
Output: false

Constraints:
1 <= s.length, t.length <= 5 * 104
s and t consist of lowercase English letters.

--------------------------
86% faster

class Solution {
public:
    bool isAnagram(string s, string t) {
        
        //if size is not equal then its clear that anagram is not possible
        if(s.size() != t.size())
            return false;
        
        //for counting the frequency of the letters
        vector<int>v(26, 0); //size is 26 because english letters are 26 only: initialised to the zero
        
        for(int i = 0; i < s.size(); i++) {
            v[s[i] - 'a']++;  //letter present in the first string: increment that index
            v[t[i] - 'a']--;  //decrement same index : so final index value will be zero
        }
        
        //checking : if final value is not zero then anagram is not possible
        for(int i = 0; i < s.size(); i++) {
            if(v[s[i] - 'a']!=0)
                return false;
        }
        return true;
    }
};

---------------------------
class Solution {
public:
    bool isAnagram(string s, string t) {
        if (s.length() != t.length())
            return false;
        std::vector<int> charFreqInS(256, 0);
        std::vector<int> charFreqInT(256, 0);
        
        for (int idx = 0; idx != s.length(); ++idx) {
            charFreqInS[s[idx]]++;
            charFreqInT[t[idx]]++;
        }
        
        for (int idx = 'a'; idx <= 'z'; ++idx)
             if (charFreqInS[idx] != charFreqInT[idx])
                return false;
        
        return true;
    }
};

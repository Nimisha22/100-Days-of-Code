21. Merge Two Sorted Lists
Easy

Merge two sorted linked lists and return it as a sorted list. 
The list should be made by splicing together the nodes of the first two lists.

Example 1:
Input: l1 = [1,2,4], l2 = [1,3,4]
Output: [1,1,2,3,4,4]

Example 2:
Input: l1 = [], l2 = []
Output: []

Example 3:
Input: l1 = [], l2 = [0]
Output: [0]
 
Constraints:
The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both l1 and l2 are sorted in non-decreasing order.
------------------------------------

18% faster
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
     
    if(l1 == NULL) 
        return l2;
    if(l2 == NULL) 
        return l1;
    
    ListNode* dummy = new ListNode();
    ListNode* p = dummy;
    
    while(l1 != NULL && l2 != NULL){
        if(l1->val <= l2->val){
            p->next = l1;
            l1 = l1->next;
        }
        else{
            p->next = l2;
            l2 = l2->next;
        }
        
        p = p->next;
    }
    
    p->next = (l1 != NULL) ? l1 : l2;
    return dummy->next;
} 
    
};

------------------------
78% faster
class Solution {
public:
  
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode *ans = NULL;
        if(l1 == NULL){
            return l2;
        } else if(l2 == NULL){
            return l1;
        } else {
            if((l1->val) >= (l2->val)){
                ans = l2;
                ans->next = mergeTwoLists(l2->next, l1);
            } else {
                ans = l1;
                ans->next = mergeTwoLists(l1->next, l2);
            }
        }
        return ans;
    }
};
-----------------
100% faster

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1 == NULL and l2 == NULL) return NULL;
        if(l1 == NULL or l2 == NULL) return (l1 != NULL ? l1 : l2);
        if (l1 -> val < l2 -> val){
            l1 -> next = mergeTwoLists(l1 -> next, l2);
            return l1;
        } else {
            l2 -> next = mergeTwoLists(l1, l2 -> next);
            return l2;
        }
    }
};

Design a Data Structure SpecialStack that supports all the stack operations like push(), pop(), 
isEmpty(), isFull() and an additional operation getMin() which should return minimum element 
from the SpecialStack. All these operations of SpecialStack must be O(1). To implement SpecialStack, 
you should only use standard Stack data structure and no other data structure like arrays, list, etc. 

-----------------------------------------------
Brute Force

Use two stacks: one to store actual stack elements and the other as an auxiliary stack to store minimum values. 
The idea is to do push() and pop() operations in such a way that the top of the auxiliary stack is always the minimum. 
Let us see how push() and pop() operations work.

Push(int x) // inserts an element x to Special Stack 
1) push x to the first stack (the stack with actual elements) 
2) compare x with the top element of the second stack (the auxiliary stack). Let the top element be y. 
…..a) If x is smaller than y then push x to the auxiliary stack. 
…..b) If x is greater than y then push y to the auxiliary stack.
int Pop() // removes an element from Special Stack and return the removed element 
1) pop the top element from the auxiliary stack. 
2) pop the top element from the actual stack and return it.
Step 1 is necessary to make sure that the auxiliary stack is also updated for future operations.
int getMin() // returns the minimum element from Special Stack 
1) Return the top element of the auxiliary stack.

We can see that all the above operations are O(1). 
Let us see an example. Let us assume that both stacks are initially empty and 18, 19, 29, 15, and 16 are inserted to the SpecialStack. 

When we insert 18, both stacks change to following.
Actual Stack
18 <--- top     
Auxiliary Stack
18 <---- top

When 19 is inserted, both stacks change to following.
Actual Stack
19 <--- top     
18
Auxiliary Stack
18 <---- top
18

When 29 is inserted, both stacks change to following.
Actual Stack
29 <--- top     
19
18
Auxiliary Stack
18 <---- top
18
18

When 15 is inserted, both stacks change to following.
Actual Stack
15 <--- top     
29
19 
18
Auxiliary Stack
15 <---- top
18
18
18

When 16 is inserted, both stacks change to following.
Actual Stack
16 <--- top     
15
29
19 
18
Auxiliary Stack
15 <---- top
15
18
18
18

In the below implementation, SpecialStack inherits from Stack and has one Stack object min which works as an auxiliary stack.
-----------------------------------------------

Further optimized O(1) time complexity and O(1) space complexity solution :
The above approach can be optimized further and the solution can be made to work in O(1) time complexity and O(1) space complexity. The idea is to store min element found till current insertion) along with all the elements as a reminder of a DUMMY_VALUE, and the actual element as a multiple of the DUMMY_VALUE.
For example, while pushing an element ‘e’ into the stack, store it as (e * DUMMY_VALUE + minFoundSoFar), this way we know what was the minimum value present in the stack at the time ‘e’ was being inserted.



To pop the actual value just return e/DUMMY_VALUE and set the new minimum as (minFoundSoFar % DUMMY_VALUE).

Note: Following method will fail if we try to insert DUMMY_VALUE in the stack, so we have to make our selection of DUMMY_VALUE carefully.
Let’s say the following elements are being inserted in the stack – 3 2 6 1 8 5

d is dummy value.

s is wrapper stack

top is top element of the stack

min is the minimum value at that instant when the elements were inserted/removed

The following steps shows the current state of the above variables at any instant – 

s.push(3);
min=3 //updated min as stack here is empty 
s = {3*d + 3}
top = (3*d + 3)/d = 3 
 
s.push(2);
min = 2 //updated min as min > current element
s = {3*d + 3-> 2*d + 2}
top = (2*d + 2)/d = 2
 
s.push(6);
min = 2
s = {3*d + 3-> 2*d + 2-> 6*d + 2}
top = (6*d + 2)/d = 6
 
s.push(1);
min = 1 //updated min as min > current element
s = {3*d + 3-> 2*d + 2-> 6*d + 2 -> 1*d + 1}
top = (1*d + 1)/d = 1
 
s.push(8);
min = 1
s = {3*d + 3-> 2*d + 2-> 6*d + 2 -> 1*d + 1 -> 8*d + 1}
top = (8*d + 1)/d = 8
 
s.push(5);
min = 1
s = {3*d + 3-> 2*d + 2-> 6*d + 2 -> 1*d + 1 -> 8*d + 1 -> 5*d + 1}
top = (5*d + 1)/d = 5
 
s.pop();
s = {3*d + 3 -> 2*d + 2 -> 6*d + 2 -> 1*d + 1 -> 8*d + 1 -> 5*d + 1}
top = (5*d + 1)/d = 5
min = (8*d + 1)%d = 1 // min is always remainder of the second top element in stack.
 
s.pop();
s = {3*d + 3 -> 2*d + 2-> 6*d + 2 -> 1*d + 1 -> 8*d + 1}
top = (8*d + 1)/d = 8
min = (1*d + 1)%d = 1
 
s.pop()
s = {3*d + 3 -> 2*d + 2-> 6*d + 2 -> 1*d + 1} 
top = (1*d + 1)/d = 1
min = (6*d + 2)%d = 2
 
s.pop()
s = {3*d + 3-> 2*d + 2-> 6*d + 2}
top = (6*d + 2)/d = 6
min = (2*d + 2)%d = 2
 
s.pop()
s = {3*d + 3-> 2*d + 2}
top = (2*d + 2)/d = 2
min = (3*d + 3)%d = 3
 
s.pop()
s = {3*d + 3}
top = (3*d + 3)/d = 3
min  = -1 // since stack is now empty
------------------------------------------
#include <iostream>
#include <stack>
#include <vector>
using namespace std;

/* A special stack having peek() pop() and
* push() along with additional getMin() that
* returns minimum value in a stack without
* using extra space and all operations in O(1)
* time.. ???? */
class SpecialStack {
	
	// Sentinel value for min
	int min = -1;
	
	// DEMO_VALUE
	static const int demoVal = 9999;
	stack<int> st;

public:

	void getMin() {
		cout << "min is: " << min << endl;
	}

	void push(int val) {
		
		// If stack is empty OR current element
		// is less than min, update min.
		if (st.empty() || val < min) {
			min = val;
		}
		
		// Encode the current value with
		// demoVal, combine with min and
		// insert into stack
		st.push(val * demoVal + min);
		cout << "pushed: " << val << endl;
	}

	int pop() {
		// if stack is empty return -1;
		if ( st.empty() ) {
		cout << "stack underflow" << endl ;
		return -1;
		}
	
		int val = st.top();
		st.pop();
		
		// If stack is empty, there would
		// be no min value present, so
		// make min as -1
		if (!st.empty())
			min = st.top() % demoVal;
		else
			min = -1;
			
		cout << "popped: " << val / demoVal << endl;
		
		// Decode actual value from
		// encoded value
		return val / demoVal;
	}

	int peek() {
		
		// Decode actual value
		// from encoded value
		return st.top() / demoVal;
	}
};


int main() {
	SpecialStack s;

	vector<int> arr = { 3, 2, 6, 1, 8, 5, 5, 5, 5 };

	for(int i = 0; i < arr.size(); i++) {
		s.push(arr[i]);
		s.getMin();
	}
	
	cout << endl;
	for(int i = 0; i < arr.size(); i++) {
		s.pop();
		s.getMin();
	}
	return 0;
}


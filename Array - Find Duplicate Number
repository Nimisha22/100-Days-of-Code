287. Find the Duplicate Number
Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
There is only one repeated number in nums, return this repeated number.
You must solve the problem without modifying the array nums and uses only constant extra space.

Example 1:
Input: nums = [1,3,4,2,2]
Output: 2

Example 2:
Input: nums = [3,1,3,4,2]
Output: 3

Example 3:
Input: nums = [1,1]
Output: 1

Example 4:
Input: nums = [1,1,2]
Output: 1
 
Constraints:
1 <= n <= 105
nums.length == n + 1
1 <= nums[i] <= n
All the integers in nums appear only once except for precisely one integer which appears two or more time

--------------------------
FLOYD ALGO | HARE N TORTOISE ALGO | t.c = 0(n) s.c = 0(1)
108 ms

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
       int n = nums.size();

       int slow = nums[0];
       int fast = nums[0];
    
    do{
        slow = nums[slow];
        fast = nums[nums[fast]];
    } while(slow != fast);
        
        
     fast = nums[0];
     while(slow != fast) {
        slow = nums[slow];
        fast = nums[fast];
    }
    return slow;
    }
};

----------------------------------
56 ms
static const auto fastIO = []() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    return 0;
}();

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        for (int i = 0; i < nums.size(); ++i) {
        int loc = abs(nums[i]) - 1;
        if (nums[loc] < 0)return loc + 1;
        nums[loc] *= -1;
    }return -1;
    }
};


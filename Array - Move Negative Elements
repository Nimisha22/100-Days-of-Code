Move all negative numbers to beginning and positive to end with constant extra space

An array contains both positive and negative numbers in random order. 
Rearrange the array elements so that all negative numbers appear before all positive numbers.

Examples : 

Input: -12, 11, -13, -5, 6, -7, 5, -3, -6
Output: -12 -13 -5 -7 -3 -6 11 6 5
Note: Order of elements is not important here.

--------------------------------------------------------------
Brute Force Approach: A brute force approach could be to just sort the given array in ascending order. 
This will result in all negative numbers to appear at the beginning and positive number at the end.

----------------------------------------------------------------
Partioning Method - Quick Sort - O(n)
A better approach could be to use the concept similar to the partitioning algorithm of quicksort. 
The idea is to start from the leftmost element in the array and keep track of any negative elements. 
While traversing the array if we find a negative element, we swap the current element with 
the leftmost positive element. Otherwise, ignore the current element.

The Algorithm is as follows:
1. Let ‘j’ point to the leftmost positive element in the array. Initially, we set ‘j’ to point to the first element.
2. Iterate over the array:
   Let ‘i’ be the index of the current element.
   If the current element is negative:
        If ‘i’ not equal to ‘j’, then swap the ith and jth elements.
        Increment ‘j’ by 1.
3. Return the resulting array.


#include <bits/stdc++.h>
using namespace std;

void rearrange(int arr[], int n) {
	int j = 0;
	for (int i = 0; i < n; i++) {
		if (arr[i] < 0) {
			if (i != j)
				swap(arr[i], arr[j]);
			j++;
		}
	}
}


void printArray(int arr[], int n) {
	for (int i = 0; i < n; i++)
		printf("%d ", arr[i]);
}


int main() {
	int arr[] = { -1, 2, -3, 4, 5, 6, -7, 8, 9 };
	int n = sizeof(arr) / sizeof(arr[0]);
	rearrange(arr, n);
	printArray(arr, n);
	return 0;
}

-----------------------------------------------------
Two Pointer Approach: O(n)
A simple approach could be to use the concept of a two-pointer.
In this approach keep two pointers ‘LEFT’ and ‘RIGHT’ which initially point to the first and the 
last elements of the array. All the elements to the left of ‘LEFT’ pointer are negative and to the 
right of ‘RIGHT’ pointer are positive. The idea is to iterate over the array and segregate the 
positive and negative elements with the help of these pointers.

The Algorithm is as follows:
1. Create two pointers named ‘LEFT’ and ‘RIGHT’ and initialize them with the first and the last index of the array.
2. Now, iterate over the array until the ‘LEFT’ is less than ‘RIGHT’:
   While iterating, the following cases may arise.
   Case 1: If both ‘LEFT’ and ‘RIGHT’ pointers point to negative elements, then simply increment the left pointer.
   Case 2: If both ‘LEFT’ and ‘RIGHT’ pointers point to positive elements, then simply decrement the right pointer.
   Case 3: If the ‘LEFT’ pointer points to positive element and ‘RIGHT’ pointer points to negative element, 
           then swap the two elements and increment the left pointer and decrement the right pointer.
   Case 4: If ‘LEFT’ pointer points to the negative element and ‘RIGHT’ pointer points to the positive element, 
           then we increment the left pointer and decrement the right pointer.
3. Return the resulting array.

#include <iostream>
using namespace std;

void shiftall(int arr[], int left, int right) {
  while (left <= right) {
	// Condition to check if the left and the right elements are negative
	if (arr[left] < 0 && arr[right] < 0)
	    left+=1;
	
	// Condition to check if the left pointer element is positive and
	// the right pointer element is negative
	else if (arr[left]>0 && arr[right]<0) {
	  int temp = arr[left];
	  arr[left] = arr[right];
	  arr[right] = temp;
	  left += 1;
	  right -= 1;
	}
	
	// Condition to check if both the elements are positive
	else if (arr[left]>0 && arr[right] >0)
	    right-=1;
	
  else{
	  left += 1;
	  right -= 1;
	}
 }
}


void display(int arr[], int right){
  for (int i = 0; i <= right; ++i)
	  cout << arr[i] << " ";
  cout<<endl;
}


int main() {
  int arr[] = {-12, 11, -13, -5, 6, -7, 5, -3, 11};
  int arr_size = sizeof(arr) / sizeof(arr[0]);
  shiftall(arr, 0, arr_size-1);
  display(arr, arr_size - 1);
  return 0;
}



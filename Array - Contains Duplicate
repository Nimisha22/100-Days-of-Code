217. Contains Duplicate
Easy
Given an integer array nums, return true if any value appears at least twice in the array, 
and return false if every element is distinct.

Example 1:
Input: nums = [1,2,3,1]
Output: true

Example 2:
Input: nums = [1,2,3,4]
Output: false

Example 3:
Input: nums = [1,1,1,3,3,4,3,2,4,2]
Output: true
 
Constraints:
1 <= nums.length <= 105
-109 <= nums[i] <= 109
------------------------------------------

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        unordered_map<int, int> mp;
        
        for(int i = 0; i < nums.size(); i++) {
            if(mp.count(nums[i]))
                return true;
         mp[nums[i]] = i;
        }
        return false;
    }
};

Runtime: 32 ms, faster than 68.23% of C++ online submissions for Contains Duplicate.
Memory Usage: 20.2 MB, less than 61.52% of C++ online submissions for Contains

-----------------------------
100% faster

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size()-1;i++){
            if(nums[i]==nums[i+1]){
                return true;
            }
       
        }
    return false;
    }
};

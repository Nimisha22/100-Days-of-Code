43. Multiply Strings
Medium

Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.
Note: You must not use any built-in BigInteger library or convert the inputs to integer directly 

Example 1:
Input: num1 = "2", num2 = "3"
Output: "6"

Example 2:
Input: num1 = "123", num2 = "456"
Output: "56088"
 

Constraints:
1 <= num1.length, num2.length <= 200
num1 and num2 consist of digits only.
Both num1 and num2 do not contain any leading zero, except the number 0 itself.
--------------------------------
i = n.size()-1 to 0
j = m.size()-1 to 0

vector mul =n + m (0000)

i = 1, j = 1
mul[3] = 0 + 18
mul[2] = 1
mul[3] = 8

i = 1, j = 0
mul[2] = 1 + 12 = 13
mul[1] = 0 + 1 = 1
mul[2] = 3

i = 0, j  = 1
mul[2] = 3 + (3 * 4) = 15
mul[1] = 1 + 1 = 2
mul[2] = 5

i = 0, j = 0
mul[1] = 2 + 8 = 10
mul[0] = 0 + 1 = 1
mul[1] = 0
mul[3] = 8
mul[2] = 5
mul[1] = 0
mul[0] = 1

ans = ""
while(mul[i] == 0)
  i++;

ans = ans + mul[i++]

23
46
-----
8
12
12
   18
------
1058

mul[i+j+1] += n[i] * m[j]
mul[i+j] += mul[i+j+1] / 10
mul[i+j+1] = mul[i+j+1] % 10
i = n.size()-1 to 0
j = m.size()-1 to 0

vector mul =n + m (0000)

i = 1, j = 1
mul[3] = 0 + 18
mul[2] = 1
mul[3] = 8

i = 1, j = 0
mul[2] = 1 + 12 = 13
mul[1] = 0 + 1 = 1
mul[2] = 3

i = 0, j  = 1
mul[2] = 3 + (3 * 4) = 15
mul[1] = 1 + 1 = 2
mul[2] = 5

i = 0, j = 0
mul[1] = 2 + 8 = 10
mul[0] = 0 + 1 = 1
mul[1] = 0
mul[3] = 8
mul[2] = 5
mul[1] = 0
mul[0] = 1

ans = ""
while(mul[i] == 0)
  i++;

ans = ans + mul[i++]
23
46
-----
8
12
12
   18
------
1058
mul[i+j+1] += n[i] * m[j]
mul[i+j] += mul[i+j+1] / 10
mul[i+j+1] = mul[i+j+1] % 10

----------------------------------------

class Solution {
public:
    string multiply(string num1, string num2) {
        if (num1 == "0" || num2 == "0") 
            return "0";
        
        vector<int> mul(num1.size() + num2.size(), 0);
        
        for (int i = num1.size() - 1; i >= 0; i--) {
            for (int j = num2.size() - 1; j >= 0; j--) {
                mul[i + j + 1] += (num1[i] - '0') * (num2[j] - '0');
                mul[i + j] += mul[i + j + 1] / 10;
                mul[i + j + 1] %= 10;
            }
        }
        
        int i = 0;
        string ans = "";
        while (mul[i] == 0) 
            i++;
        
        while (i < mul.size()) 
            ans += to_string(mul[i++]);
        
        return ans;
    }
};
----------------------------------------
class Solution {
public:
    string multiply(string num1, string num2) {
        int m = num1.size(), n = num2.size();
        string res (m+n, '0');
        for(int j = n-1; j >= 0; j--){
            for(int i = m-1; i >= 0; i--){
                int sum = (num1[i] - '0') * (num2[j] - '0');
                sum += (res[i+j+1] - '0') + (res[i+j] - '0') * 10;
                res[i+j+1] = sum % 10 + '0';
                res[i+j] = sum / 10 + '0';
            }
        }
        int i = 0;
        while(i < m+n && res[i] == '0') i++;
        return i == m+n ? "0" : res.substr(i);
    }
};

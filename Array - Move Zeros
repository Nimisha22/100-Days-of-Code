283. Move Zeroes
Easy

Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.
Note that you must do this in-place without making a copy of the array.

Example 1:
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

Example 2:
Input: nums = [0]
Output: [0]

Constraints:
1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1

---------------------------------------
51% faster
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        
      // Without loss of generality if we travel and modify the array as we go along the pass the   
	    // non zeroes come to the front and the remaining can be filled wit zeroes
  
       int lastzeroindex = 0;
       int n = nums.size();
        
       for(int i = 0 ; i < n ; i++) {
	     // Non Zero numbers are added keeping the order same
           if(nums[i]){
               nums[lastzeroindex++] = nums[i]; 
           }
              
       }
       
	     // Zeroes are added till the array is not completely filled as number of 
       // elements in array remain constant just the order changes 
        for (int i = lastzeroindex; i < nums.size(); i++) {
                           nums[i] = 0;
        }
    }
};


-----------

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        ios::sync_with_stdio(false);
        cin.tie(nullptr);
        int j=0, n=nums.size();
        for(int i=0; i<n; ++i){
            if(nums[i]) {
                nums[j++]=nums[i];
            }
        }
        for(; j<n; nums[j++]=0){}
    }
};

// C++ program to find union of two sorted arrays
#include <bits/stdc++.h>
using namespace std;

void printUnion(int arr1[], int arr2[], int m, int n) {
	int i = 0, j = 0;
	while (i < m && j < n) {
		if (arr1[i] < arr2[j])
			cout << arr1[i++] << " ";

		else if (arr2[j] < arr1[i])
			cout << arr2[j++] << " ";

		else {
			cout << arr2[j++] << " ";
			i++;
		}
	}

	/* Print remaining elements of the larger array */
	while (i < m)
		cout << arr1[i++] << " ";

	while (j < n)
		cout << arr2[j++] << " ";
}


int main() {
	int arr1[] = { 1, 2, 4, 5, 6 };
	int arr2[] = { 2, 3, 5, 7 };

	int m = sizeof(arr1) / sizeof(arr1[0]);
	int n = sizeof(arr2) / sizeof(arr2[0]);

	printUnion(arr1, arr2, m, n);

	return 0;
}

--------------------------------

// Java program to find union of two
// sorted arrays (Handling Duplicates)
class FindUnion {

	static void UnionArray(int arr1[], int arr2[]) {
		// Taking max element present in either array
		int m = arr1[arr1.length - 1];
		int n = arr2[arr2.length - 1];

		int ans = 0;

		if (m > n) {
			ans = m;
		}
		else
			ans = n;

		// Finding elements from 1st array (non duplicates only). Using
		// another array for storing union elements of both arrays
		// Assuming max element present in array is not more than 10^7
		int newtable[] = new int[ans + 1];

		// First element is always present in final answer
		System.out.print(arr1[0] + " ");

		// Incrementing the First element's count
		// in it's corresponding index in newtable
		++newtable[arr1[0]];

		// Starting traversing the first array from 1st index till last
		for (int i = 1; i < arr1.length; i++) {
			// Checking whether current element
			// is not equal to it's previous element
			if (arr1[i] != arr1[i - 1]) {
				System.out.print(arr1[i] + " ");
				++newtable[arr1[i]];
			}
		}

		// Finding only non common elements from 2nd array
		for (int j = 0; j < arr2.length; j++) {
			// By checking whether it's already
			// present in newtable or not
			if (newtable[arr2[j]] == 0) {
				System.out.print(arr2[j] + " ");
				++newtable[arr2[j]];
			}
		}
	}


	public static void main(String args[]) {
		int arr1[] = { 1, 2, 2, 2, 3 };
		int arr2[] = { 2, 3, 4, 5 };

		UnionArray(arr1, arr2);
	}
}

--------------------------------------------

// C++ program to find intersection of two sorted arrays
#include <bits/stdc++.h>
using namespace std;

void printIntersection(int arr1[], int arr2[], int m, int n) {
	int i = 0, j = 0;
	while (i < m && j < n) {
		if (arr1[i] < arr2[j])
			i++;
		else if (arr2[j] < arr1[i])
			j++;
		else /* if arr1[i] == arr2[j] */
		{
			cout << arr2[j] << " ";
			i++;
			j++;
		}
	}
}


int main() {
	int arr1[] = { 1, 2, 4, 5, 6 };
	int arr2[] = { 2, 3, 5, 7 };

	int m = sizeof(arr1) / sizeof(arr1[0]);
	int n = sizeof(arr2) / sizeof(arr2[0]);

	// Function calling
	printIntersection(arr1, arr2, m, n);

	return 0;
}

----------------------------------------
# Python3 program to find Intersection of two
# Sorted Arrays (Handling Duplicates)
def IntersectionArray(a, b, n, m):
	'''
	:param a: given sorted array a
	:param n: size of sorted array a
	:param b: given sorted array b
	:param m: size of sorted array b
	:return: array of intersection of two array or -1
	'''

	Intersection = []
	i = j = 0
	
	while i < n and j < m:
		if a[i] == b[j]:

			# If duplicate already present in Intersection list
			if len(Intersection) > 0 and Intersection[-1] == a[i]:
				i+= 1
				j+= 1

			# If no duplicate is present in Intersection list
			else:
				Intersection.append(a[i])
				i+= 1
				j+= 1
		elif a[i] < b[j]:
			i+= 1
		else:
			j+= 1
			
	if not len(Intersection):
		return [-1]
	return Intersection


if __name__ == "__main__":

	arr1 = [1, 2, 2, 3, 4]
	arr2 = [2, 2, 4, 6, 7, 8]
	
	l = IntersectionArray(arr1, arr2, len(arr1), len(arr2))
	print(*l)


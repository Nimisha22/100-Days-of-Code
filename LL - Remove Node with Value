203. Remove Linked List Elements
Easy

Given the head of a linked list and an integer val, remove all the nodes of the linked list 
that has Node.val == val, and return the new head.

Example 1:
Input: head = [1,2,6,3,4,5,6], val = 6
Output: [1,2,3,4,5]

Example 2:
Input: head = [], val = 1
Output: []

Example 3:
Input: head = [7,7,7,7], val = 7
Output: []

Constraints:
The number of nodes in the list is in the range [0, 104].
1 <= Node.val <= 50
0 <= val <= 50
---------------------------------
29% faster

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeElements(ListNode* head, int val) {
	if(!head) return head;

	ListNode* node = head;
	while(node && node -> next)
	{
		if(node -> next -> val == val)
			node -> next = node -> next -> next;
		else
			node = node -> next;
	}

	if(head -> val == val)
		head = head -> next;

	return head;
}
};
------------------------------------------------

class Solution {
public:
    ListNode* removeElements(ListNode* head, int val) {
        
        // Omit the nodes from the start of list by moving head pointer
        // if these nodes have to be deleted
        // eg [7, 7, 7, 3] val = 7, then we have to delete all 7 and move head to 3
        while(head && head->val == val) head = head->next;
        
        // Now our head is updated
        
        // Now we will iterate our linked list using cur pointer
        // we surely know that cur is not to be deleted because we came to it
        // from the previous loop
        ListNode* cur = head;
        
        // loop through list and always check for next of cur node because we
        // know that cur has not to be deleted
        while(cur){
            
            // If the next of cur node is to be deleted
            // then point the next pointer of cur node to the next pointer
            // of the node that has to be deleted i.e. the next of (next of cur)
            if(cur->next && cur->next->val == val)
                cur->next = cur->next->next;
            
            // If next of cur is save and should not be deleted then move cur pointer to it
            // Because we want that till cur pointer we have the nodes that need not be deleted
            else cur = cur->next;
            
        }
        
        // then return the head of our updated list
        return head;
    }
};

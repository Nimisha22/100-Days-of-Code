668. Kth Smallest Number in Multiplication Table
Hard
Nearly everyone has used the Multiplication Table. The multiplication table of size m x n is an integer 
matrix mat where mat[i][j] == i * j (1-indexed).

Given three integers m, n, and k, return the kth smallest element in the m x n multiplication table.

Example 1:
Input: m = 3, n = 3, k = 5
Output: 3
Explanation: The 5th smallest number is 3.

Example 2:
Input: m = 2, n = 3, k = 6
Output: 6
Explanation: The 6th smallest number is 6.
 
Constraints:
1 <= m, n <= 3 * 104
1 <= k <= m * n

------------------------------------------

Idea:
In each iteration, we check if the current number can possibly be the kth smallest, which means that it has at least k smaller numbers in the table.
If we have more than k smaller numbers, we continue searching in the smaller numbers - hi = mid.
If we don't have k numbers yet, we continue searching in the higher number - lo = mid + 1.

How do count the smaller numbers?
In the function kSmaller we start counting.
We loop through the rows of the table.
Each row looks like this: [1 * i, 2 * i, 3 * i, ..., n * i].
If the last number in the row is larger than num, then the number of smaller numbers is num/i. Otherwise, the whole row is smaller = n.
So we add to c the minimum between the two.

Time Complexity: O(m * log(nm)) - we do binary search on nm numbers = log(nm), and for each search we call kSmaller which is m.
Space Complexity: O(1)

------------------------------------------
16 ms, 48% faster
class Solution {
public:
    bool kSmaller(int n, int m, int num, int k) {
        int c = 0;
        for (int i = 1; i <= m; i++)
            c += min(n, num/i);
        
        return c >= k;
    }
    
    int findKthNumber(int m, int n, int k) {
        int lo = 0, hi = m*n, mid, res;
        
        while (lo < hi) {
            mid = lo + (hi - lo) / 2;
            
            if (kSmaller(n, m, mid, k)) hi = mid;
            else lo = mid + 1;
        }
        
        return lo;
    }
};

--------------------------------
4 ms 100% faster

class Solution {
public:
    int findKthNumber(int m, int n, int k) {
        int l = 1, h = m * n;
        if (n > m) swap(m,n);
        
        while (l < h) {
            int md = (l + h) / 2, i0 = md / m, cnt = i0 * m;
            for (int i = i0 + 1, im = min(n, md); i <= im; ++i)
                if ((cnt += min(m, md / i)) >= k) 
                  break;
            
            if (cnt < k) 
              l = md + 1; 
            else 
              h = md;
        }
        return l;
    }
};

74. Search a 2D Matrix
Medium

Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
 
Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Example 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
 
Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104

----------------------------------

21% faster
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size();     // rows
        int n = matrix[0].size();  // columns
        
        int row = 0, col = n - 1;
        
        while(row < m && col >= 0) {
			// If target found
            if(matrix[row][col] == target)
                return true;
            
			// If target is smaller than current element - decrement col 
            if(matrix[row][col] > target)
                col--;
				
			// If target is greater than current element - increment row
            else
                row++;
        }
        
		// Target not found
        return false;
    }
};

---------------------------------------------

static const auto speedup = [](){
    ios_base::sync_with_stdio(false);
    cout.tie(NULL);
    cin.tie(NULL);
    return NULL;
}();


class Solution {
public:
    int cols = 0;
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        cols = matrix[0].size();
        return binarySearch(matrix, 0, matrix.size() * matrix[0].size() - 1, target);
    }
private:
    pair<int, int> iT(int index) { // index translation
        cout << '[' << index/cols << ',' << index%cols << ']' << endl;
        return {index/cols, index%cols};
    }
    
    bool binarySearch(vector<vector<int>> & matrix, int l, int r, int x) {
        pair<int, int> temp;
        while (r >= l) {
            int mid = l + (r - l) / 2;
            temp = iT(mid);
            
            if ( matrix[temp.first][temp.second] == x)
                return true;
            else if ( matrix[temp.first][temp.second] > x)
                r=mid-1;
            else l = mid+1;
        }
        return false;
    }
    
};

Given an array A[] consisting 0s, 1s and 2s. The task is to write a function that sorts the given array. 
The functions should put all 0s first, then all 1s and all 2s in last.

Examples: 
Input: {0, 1, 2, 0, 1, 2}
Output: {0, 0, 1, 1, 2, 2}

Input: {0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1}
Output: {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2}

https://www.geeksforgeeks.org/sort-an-array-of-0s-1s-and-2s/
-----------------------------------------------
#include <map>

class Solution {
public:
    void sortColors(vector<int>& nums) {
        map<int,int> colorsAppearance;         
        for (const auto num: nums) {
            if (colorsAppearance.find(num) == colorsAppearance.end())
                colorsAppearance[num] = 1;
            else 
                ++colorsAppearance[num];            
        }
        int index = 0;
        for (int i = 0; i <= 2; ++i) {
            for (int j = 0; j < colorsAppearance[i]; ++j) {
                nums.at(index) = i;
                ++index;
            }
        }
    }
};
------------------------------------------------

class Solution {
public:
    void sortColors(vector<int>& A) {
        int n=A.size();
        int l = 0, i = 0, r = n;
       while(i < r) {
           if(A[i] < 1) swap(A[l++], A[i++]);
           else if(A[i] == 1) i++;
           else swap(A[i], A[--r]);
       }
        
    }
};
swap(): O(1)

-------------------------------------------
// Dutch National Flag - 3 way partitioning - O(n)
// https://users.monash.edu/~lloyd/tildeAlgDS/Sort/Flag/

Algorithm: 
1. Keep three indices low = 1, mid = 1 and high = N and there are four ranges, 1 to low (the range containing 0), 
   low to mid (the range containing 1), mid to high (the range containing unknown elements) and high to N (the range containing 2).
2. Traverse the array from start to end and mid is less than high. (Loop counter is i)
3. If the element is 0 then swap the element with the element at index low and update low = low + 1 and mid = mid + 1
4. If the element is 1 then update mid = mid + 1
5. If the element is 2 then swap the element with the element at index high and update high = high – 1 and update i = i – 1. 
   As the swapped element is not processed
6. Print the output array.


class Solution {
public:
   void sortColors(vector<int>& a) {
        if(a.empty()) return;
        int low = 0;
        int mid = 0;
        int high = a.size()-1;
        
        while(mid <= high){
            switch(a[mid]){
                case 0: {
                    swap(a[low], a[mid]);
                    mid++;
                    low++;
                    break;
                }
                case 1: {
                    mid++;
                    break;
                }
                case 2: {
                    swap(a[mid], a[high]);
                    high--;
                    break;
                }
                    
            }
        }
    }
};

88. Merge Sorted Array
Easy
You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, 
representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. 
To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged,
and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

Example 1:
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.

Example 2:
Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].

Example 3:
Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.

Constraints:
nums1.length == m + n
nums2.length == n
0 <= m, n <= 200
1 <= m + n <= 200
-109 <= nums1[i], nums2[j] <= 109

--------------------------------------------------------------
T = O(m + n)
class Solution {
public:
    void merge(vector<int>& a, int m, vector<int>& b, int n) {
        vector<int> c;
        int str = 0;
        int str_2 = 0;
        while((str < m) || (str_2 < n)){
            if(str == m){
                c.push_back(b[str_2]);
                str_2++;
            }
            else if(str_2 == n){
                c.push_back(a[str]);
                str++;
            }
            else{
                if(a[str] < b[str_2]){
                    c.push_back(a[str]);
                    str++;
                }
                else{
                    c.push_back(b[str_2]);
                    str_2++;
                }
            }
        }
        a = c;
    }
};

---------------------------------------------------
Time Complexity: O(min(nlogn, mlogm))

#include <bits/stdc++.h>
using namespace std;

void swap(int& a, int& b) {
	int temp = a;
	a = b;
	b = temp;
}

void rotate(int a[], int n, int idx) {
	int i;
	for (i = 0; i < idx / 2; i++)
		swap(a[i], a[idx - 1 - i]);
	for (i = idx; i < (n + idx) / 2; i++)
		swap(a[i], a[n - 1 - (i - idx)]);
	for (i = 0; i < n / 2; i++)
		swap(a[i], a[n - 1 - i]);
}

void sol(int a1[], int a2[], int n, int m) {
	int l = 0, h = n - 1, idx = 0;
	while (l <= h) {
		// select the median of the remaining subarray
		int c1 = (l + h) / 2;
		// select the first elements from the larger array
		// equal to the size of remaining portion to the
		// right of the smaller array
		int c2 = n - c1 - 1;
		int l1 = a1[c1];
		int l2 = a2[c2 - 1];
		int r1 = c1 == n - 1 ? INT_MAX : a1[c1 + 1];
		int r2 = c2 == m ? INT_MAX : a2[c2];
		// compare the border elements and check for the
		// target index
		if (l1 > r2) {
			h = c1 - 1;
			if (h == -1)
				idx = 0;
		}
		else if (l2 > r1) {
			l = c1 + 1;
			if (l == n - 1)
				idx = n;
		}
		else {
			idx = c1 + 1;
			break;
		}
	}

	for (int i = idx; i < n; i++)
		swap(a1[i], a2[i - idx]);

	sort(a1, a1 + n);

	sort(a2, a2 + m);
}

void merge(int arr1[], int arr2[], int n, int m) {
	if (n > m) {
		sol(arr2, arr1, m, n);
		rotate(arr1, n, n - m);

		for (int i = 0; i < m; i++)
			swap(arr2[i], arr1[i]);
	}
	else {
		sol(arr1, arr2, n, m);
	}
}

int main() {
	int ar1[] = { 1, 5, 9, 10, 15, 20 };
	int ar2[] = { 2, 3, 8, 13 };
	int m = sizeof(ar1) / sizeof(ar1[0]);
	int n = sizeof(ar2) / sizeof(ar2[0]);
	merge(ar1, ar2, m, n);

	cout << "After Merging \nFirst Array: ";
	for (int i = 0; i < m; i++)
		cout << ar1[i] << " ";
	cout << "\nSecond Array: ";
	for (int i = 0; i < n; i++)
		cout << ar2[i] << " ";
	return 0;
}

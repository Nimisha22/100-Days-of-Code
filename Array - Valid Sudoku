36. Valid Sudoku
Medium

Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:
A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:
Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true

Example 2:
Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. 
Since there are two 8's in the top left 3x3 sub-box, it is invalid.
 

Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit 1-9 or '.'.

-----------------------------------------

53% faster
class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        //since we have to verify that each element is appears once or not... for that purpose here we use 
        //vector of sets since set stores only unique entries
        vector<set<int>> rows(9),cols(9),blocks(9); 
        
        for(int i = 0; i < 9; i++){
            for(int j = 0; j < 9; j++){
                //if board[i][j] entry is '.' then we just continue as we only care about the duplicate values
                if(board[i][j] == '.'){
                    continue;
                }
                
                int curr = board[i][j]; //we can get the value at given index to check that if it is already 
                // present in set or not
                
                //here our count function returns 1 if value is already present in row or column or block otherwise it will return 0
                
                //for block try this formula using pen and paper you will get it..
                if(rows[i].count(curr) || cols[j].count(curr) ||
                  blocks[(i / 3)* 3 + j / 3].count(curr)){
                    return false; //we return false because the value currently we have is already present in set
                }
                //if we don't found the value then after that we must enter this value in our set
                rows[i].insert(curr);
                cols[j].insert(curr);
                blocks[(i / 3 *3) + j / 3].insert(curr);
            }
        }
        return true; 
    }
};

------------------------------------

class Solution{
public:
    
    bool isValidSudoku(vector<vector<char>> &board){
        
        int used1[9][9] = {0}, used2[9][9] = {0}, used3[9][9] = {0};
  
        
        for(int i = 0; i < board.size(); ++ i)
            for(int j = 0; j < board[i].size(); ++ j)
                if(board[i][j] != '.'){     // if there is a value
                    
                    int num = board[i][j] - '0' - 1;
                    int k = (i / 3) * 3 + (j / 3);
                    
                    if(used1[i][num] || used2[j][num] || used3[k][num])
                        return false;
                    
                    used1[i][num] = used2[j][num] = used3[k][num] = 1;
                    
                }
        
        return true;
    }
    
};
